{"version":3,"sources":["getWeb3.js","App.jsx","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","useState","inputValue","setInputValue","inputValueProposal","setInputValueProposal","inputValueVote","setInputValueVote","setWeb3","contract","setContract","addresses","setAddresses","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","userBalance","setUserBalance","connButtonText","setConnButtonText","amt","useRef","whitelistDiv","startProposalDiv","endProposalsRegisteringDiv","addProposalDiv","startVotingSessionDiv","setVoteDiv","endVotingSessionDiv","tallyVotesDiv","options","filter","value","fromBlock","toBlock","useEffect","eth","getAccounts","accounts","net","getId","networkID","deployedNetwork","Voting","networks","instance","Contract","abi","address","alert","error","fetchData","accountChangedHandler","newAccount","getAccountBalance","toString","account","request","method","params","then","balance","ethers","utils","formatEther","catch","message","current","style","backgroundColor","methods","addVoter","send","from","optionEve","events","VoterRegistered","on","event","changed","str","e","target","startProposalsRegistering","getPastEvents","results","err","endProposalsRegistering","addProposal","startVotingSession","setVote","endVotingSession","tallyVotes","winningProposalID","call","uintRes","sentenceVal","innerText","location","reload","result","className","ref","type","onChange","handleInputChange","onClick","handleInputProposalChange","handleInputVoteChange","isMetaMask","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.2acc06dc.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3.js\";\nimport \"./App.css\";\nimport {ethers} from 'ethers';\n\nfunction App() {\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const [inputValueProposal, setInputValueProposal] = useState(\"\");\n  const [inputValueVote, setInputValueVote] = useState(\"\");\n  const [web3, setWeb3] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [addresses, setAddresses] = useState(null);\n  // const [isOwner, setIsOwner] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [userBalance, setUserBalance] = useState(null);\n\tconst [connButtonText, setConnButtonText] = useState('Connect Wallet');\n  const amt = useRef(null);\n  const whitelistDiv = useRef(null);\n  const startProposalDiv = useRef(null);\n  const endProposalsRegisteringDiv = useRef(null);\n  const addProposalDiv = useRef(null);\n  const startVotingSessionDiv = useRef(null);\n  const setVoteDiv = useRef(null);\n  const endVotingSessionDiv = useRef(null);\n  const tallyVotesDiv = useRef(null);\n\n  let options = {\n    filter: {\n        value: ['1000', '1337']    //Only get events where transfer value was 1000 or 1337\n    },\n    fromBlock: 0,                  //Number || \"earliest\" || \"pending\" || \"latest\"\n    toBlock: 'latest'\n  };\n\n  useEffect(() => {\n    fetchData();\n    async function fetchData() {\n      try{\n        const web3 = await getWeb3(true);\n        const accounts = await web3.eth.getAccounts();\n        const networkID = await web3.eth.net.getId();\n        const deployedNetwork = Voting.networks[networkID];\n        const instance = new web3.eth.Contract(\n          Voting.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n\n        setWeb3(web3);\n        setContract(instance);\n        setAddresses(accounts);\n\n      }\n      catch (err) {\n        alert(err);\n        console.error(err);\n      }\n    };\n\n\n  },[]);\n\n  const connectWalletHandler = () => {\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\n\t\t\tconsole.log('MetaMask Here!');\n\n\t\t\twindow.ethereum.request({ method: 'eth_requestAccounts'})\n\t\t\t.then(result => {\n\t\t\t\taccountChangedHandler(result[0]);\n\t\t\t\tsetConnButtonText('Wallet Connected');\n\t\t\t\tgetAccountBalance(result[0]);\n\t\t    window.location.reload();\n        \n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(error.message);\t\t\t\n\t\t\t});\n\n\t\t} else {\n\t\t\tconsole.log('Need to install MetaMask');\n\t\t\tsetErrorMessage('Please install MetaMask browser extension to interact');\n\t\t}\n\t}\n\n\t// update account, will cause component re-render\n\tconst accountChangedHandler = (newAccount) => {\n\t\tsetDefaultAccount(newAccount);\n\t\tgetAccountBalance(newAccount.toString());\n\t}\n\n\tconst getAccountBalance = (account) => {\n\t\twindow.ethereum.request({method: 'eth_getBalance', params: [account, 'latest']})\n\t\t.then(balance => {\n\t\t\tsetUserBalance(ethers.utils.formatEther(balance));\n\t\t})\n\t\t.catch(error => {\n\t\t\tsetErrorMessage(error.message);\n\t\t});\n\t};\n\n\tconst chainChangedHandler = () => {\n\t\t// reload the page to avoid any errors with chain change mid use of application\n\t\twindow.location.reload();\n    \n\t}\n\n  // async function fetchOwner() {\n  //   if (typeof window.ethereum !== 'undefined') {\n  //     try {\n  //       const owner = await contrat.methods.owner().call({from: owner});\n  //       console.log(\"isOwner\");\n  //       console.log(isOwner);\n  //       setIsOwner(owner.toLowerCase() === addresses[0].toLowerCase());\n  //     } catch (e) {\n  //       console.log('error fetching owner: ', e);\n  //     }\n  //   }\n  // }\n\n  // useEffect(() => {\n  //   if (addresses) {\n  //     fetchOwner();\n  //   }\n  //   // eslint-disable-next-line\n  // }, [addresses]);\n\n  async function addWhitelist () {\n    whitelistDiv.current.style.backgroundColor = \"grey\";\n    if (inputValue === \"\") {\n      alert(\"Please enter a value to write.\");\n      return;\n    }\n    console.log(inputValue);\n    await contract.methods.addVoter(inputValue).send({from: addresses[0]});\n    \n    let optionEve = {\n      filter: {\n          value: [],\n      },\n      fromBlock: 0\n  };\n    contract.events.VoterRegistered(optionEve)\n      .on('data', event => console.log(event))\n      .on('changed', changed => console.log(changed))\n      .on('connected', str => console.log(str));\n    \n  };\n\n  async function handleInputChange(e) {\n    console.log(e.target.value);\n    setInputValue(e.target.value);\n  };\n\n  async function handleInputProposalChange(e) {\n    console.log(e.target.value);\n    setInputValueProposal(e.target.value);\n  };\n\n  async function handleInputVoteChange(e) {\n    console.log(e.target.value);\n    setInputValueVote(e.target.value);\n  };  \n\n  async function startProposalsRegistering(){\n    startProposalDiv.current.style.backgroundColor = \"grey\";\n    await contract.methods.startProposalsRegistering().send({from: addresses[0]});\n    contract.getPastEvents('WorkflowStatusChange', options)\n        .then(results => console.log(results))\n        .catch(err => \"throw err\");\n  }\n\n  async function endProposalsRegistering(){\n    endProposalsRegisteringDiv.current.style.backgroundColor = \"grey\";\n    await contract.methods.endProposalsRegistering().send({from: addresses[0]});\n    contract.getPastEvents('WorkflowStatusChange', options)\n        .then(results => console.log(results))\n        .catch(err => \"throw err\");\n  }\n\n  async function addProposal () {\n    addProposalDiv.current.style.backgroundColor = \"grey\";\n    if (inputValueProposal === \"\") {\n      alert(\"Please enter a value to write.\");\n      return;\n    }\n    await contract.methods.addProposal(inputValueProposal).send({from: addresses[0]});\n    contract.getPastEvents('ProposalRegistered', options)\n        .then(results => console.log(results))\n        .catch(err => \"throw err\");\n  };\n\n  async function startVotingSession () {\n    startVotingSessionDiv.current.style.backgroundColor = \"grey\";\n    await contract.methods.startVotingSession().send({from: addresses[0]});\n    contract.getPastEvents('WorkflowStatusChange', options)\n        .then(results => console.log(results))\n        .catch(err => \"throw err\");\n  };\n  \n  async function setVote () {\n    setVoteDiv.current.style.backgroundColor = \"grey\";\n    await contract.methods.setVote(inputValueVote).send({from: addresses[0]});\n    contract.getPastEvents('WorkflowStatusChange', options)\n        .then(results => console.log(results))\n        .catch(err => \"throw err\");\n  };\n\n  async function endVotingSession () {\n    endVotingSessionDiv.current.style.backgroundColor = \"grey\";\n    await contract.methods.endVotingSession().send({from: addresses[0]});\n    contract.getPastEvents('WorkflowStatusChange', options)\n        .then(results => console.log(results))\n        .catch(err => \"throw err\");\n  };\n\n  async function tallyVotes () {\n    tallyVotesDiv.current.style.backgroundColor = \"grey\";\n    await contract.methods.tallyVotes().send({from: addresses[0]});\n\n  };\n\n  async function resultFunc () {\n    const uintRes = await contract.methods.winningProposalID().call();\n    console.log(uintRes);\n    // const propWin = await contract.methods.getOneProposal(uintRes).call({from: addresses[0]});\n    // console.log(propWin);\n    const sentenceVal = \"La proposition gagnante est la numéro : \"  + uintRes;\n    console.log(sentenceVal);\n    amt.current.innerText = sentenceVal;\n  };\n  \n  \n  // listen for account changes\n\twindow.ethereum.on('accountsChanged', accountChangedHandler);\n\twindow.ethereum.on('chainChanged', chainChangedHandler);\n\n  window.ethereum.request({ method: 'eth_requestAccounts'})\n    .then(result => {\n      accountChangedHandler(result[0]);\n      getAccountBalance(result[0]);\n    });\n\n  if(!web3) {\n    \n    return (\n      \n      <div className=\"App-header\">\n        <button onClick={connectWalletHandler}>{connButtonText}</button>\n        <br></br>\n        Loading Web3, accounts, and contract...\n      </div>\n      \n    );\n  }\n\n  return (\n    \n    <div className=\"App\">\n\n      <div className='walletCard'>\n        <div className='accountDisplay'>\n          <h3>Address: {defaultAccount}</h3>\n        </div>\n        <div className='balanceDisplay'>\n          <h3>Balance: {userBalance}</h3>\n        </div>\n          {errorMessage}\n        \n\n        <div className=\"App-header whitelist\">\n          <h1>DApp de vote</h1> \n        </div>\n      </div>\n      \n      {/* {isOwner ? ( */}\n      <div className=\"App-header whitelist\" ref={whitelistDiv}>\n        <h1>Ajouter une addresse à la liste blanche</h1>        \n        <div className=\"whitelist-div\">\n\n          <input\n            type=\"text\"\n            value={inputValue}\n            onChange={ (e) => handleInputChange(e) } />\n          <button onClick={addWhitelist}>  Ajouter  </button>\n\n        </div>\n      </div>\n      {/* ) : (null)}; */}\n\n      <br></br>      <hr></hr>      <br></br>\n\n      {/* {isOwner ? ( */}\n      <div className=\"App-header startProposal\" ref={startProposalDiv}>\n        <h1>Commencer la session d'enregistrement des propositions</h1>        \n        <div className=\"whitelist-div\">\n\n          <button onClick={startProposalsRegistering}>  Valider  </button>\n          \n        </div>\n      </div>\n      {/* ) : (null)}; */}\n\n      <br></br>      <hr></hr>      <br></br>\n\n      <div className=\"App-header addProposal\" ref={addProposalDiv}>\n        <h1>Ajouter une proposition</h1>        \n        <div className=\"addProposal-div\">\n\n          <input\n            type=\"text\"\n            value={inputValueProposal}\n            onChange={ (e) => handleInputProposalChange(e) } />\n          <button onClick={addProposal}>  Ajouter  </button>\n\n        </div>\n      </div>\n\n      <br></br>      <hr></hr>      <br></br>\n\n      {/* {isOwner ? ( */}\n      <div className=\"App-header endProposalsRegistering\" ref={endProposalsRegisteringDiv}>\n        <h1>Fin de la session d'enregistrement des propositions</h1>        \n        <div className=\"endProposalsRegistering-div\">\n\n          <button onClick={endProposalsRegistering}>  Valider  </button>\n          \n        </div>\n      </div>\n      {/* ) : (null)}; */}\n      \n      <br></br>      <hr></hr>      <br></br>\n\n      {/* {isOwner ? ( */}\n      <div className=\"App-header startVotingSession\" ref={startVotingSessionDiv}>\n        <h1>Commencer la session de vote</h1>        \n        <div className=\"startVotingSession-div\">\n\n          <button onClick={startVotingSession}>  Valider  </button>\n          \n        </div>\n      </div>\n      {/* ) : (null)}; */}\n\n      <br></br>      <hr></hr>      <br></br>\n\n      <div className=\"App-header setVote\" ref={setVoteDiv}>\n        <h1>Voter pour la proposition numéro </h1>        \n        <div className=\"setVote-div\">\n        <input\n            type=\"text\"\n            value={inputValueVote}\n            onChange={ (e) => handleInputVoteChange(e) } />\n          <button onClick={setVote}>  Valider  </button>\n          \n        </div>\n      </div>\n\n      <br></br>      <hr></hr>      <br></br>\n\n      {/* {isOwner ? ( */}\n      <div className=\"App-header endVotingSession\" ref={endVotingSessionDiv}>\n        <h1>Finir la session de vote</h1>        \n        <div className=\"endVotingSession-div\">\n\n          <button onClick={endVotingSession}>  Valider  </button>\n          \n        </div>\n      </div>\n      {/* ) : (null)}; */}\n\n      <br></br>      <hr></hr>      <br></br>\n\n      {/* {isOwner ? ( */}\n      <div className=\"App-header tallyVotes\" ref={tallyVotesDiv}>\n        <h1>Comptabiliser les votes</h1>        \n        <div className=\"tallyVotes-div\">\n\n          <button onClick={tallyVotes}>  Valider  </button>\n          \n        </div>\n      </div>\n      {/* ) : (null)}; */}\n\n      <br></br>      <hr></hr>      <br></br>\n\n      <div className=\"App-header result\">\n        <h1>Connaitre le résultat</h1>        \n        <div className=\"result-div\">\n          <button onClick={resultFunc}>  Valider  </button>          \n        </div>\n        \n        <div>\n          <span ref={amt}></span> \n        </div>\n\n        <br></br>\n      </div>\n    \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}